% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/na_if.r, R/na_if_not.r
\name{na_if}
\alias{na_if}
\alias{fauxnaif}
\alias{na_if_in}
\alias{na_if_not}
\title{Convert values to NA}
\usage{
na_if(input, ...)

na_if_in(input, ...)

na_if_not(input, ...)
}
\arguments{
\item{input}{Vector to modify}

\item{...}{Values to replace with \code{NA}, specified as either:
\itemize{
\item An object, vector of objects, or list of objects
\item A one-sided formula (see section "Formulas")
}}
}
\value{
A modified version of \code{input} with selected values replaced with
\code{NA}.
}
\description{
This is a replacement for \code{\link[dplyr:na_if]{dplyr::na_if()}}.
It is useful if you want to convert annoying values to \code{NA}.
Unlike \code{\link[dplyr:na_if]{dplyr::na_if()}}, this function allows you to specify multiple values
to be replaced with \code{NA} at the same time.
\itemize{
\item \code{na_if()} replaces values that match its arguments with \code{NA}.
\item \code{na_if_not()} replaces values that \emph{do not} match its arguments with \code{NA}.
\item \code{na_if_in()} is provided as an alias for \code{na_if()} to avoid clashes
with \code{\link[dplyr:na_if]{dplyr::na_if()}}.
}
}
\section{Formulas}{

These functions accept one-sided formulas that can evaluate to logical
vectors.
The input is represented in these conditional statements as "\code{.}".
Valid formulas take the form \code{~ . < 0}.
Additional examples are included in section "Examples".
}

\examples{
na_if_in(1:5, 2, 4)

y <- c("abc", "", "def", "NA", "ghi", 42, "jkl", "NULL", "mno")
na_if(y, "", c("NA", "NULL"), 1:100)

# This function handles vector values differently than dplyr,
# and returns a different result with vector replacement values:
na_if(1:5, 5:1)
dplyr::na_if(1:5, 5:1)

# na_if_in is particularly useful inside mutate,
# and is meant for use with vectors rather than entire data frames
dplyr::starwars \%>\%
  dplyr::select(name, hair_color) \%>\%
  dplyr::mutate(hair_color = na_if(hair_color, "unknown", "none"))

# na_if_in can also be used with scoped variants of mutate
# like mutate_if to mutate multiple columns
dplyr::starwars \%>\%
  dplyr::mutate_if(is.character, ~ na_if(., "unknown", "none"))
}
\seealso{
\link[=na_if_all]{Scoped variants} can be used in pipelines and modify
multiple variables at once

\code{\link[dplyr:na_if]{dplyr::na_if()}} to replace a single value with \code{NA}.

\code{\link[dplyr:coalesce]{dplyr::coalesce()}} to replace missing values with a specified value.

\code{\link[tidyr:replace_na]{tidyr::replace_na()}} to replace \code{NA} with a value.

\code{\link[dplyr:recode]{dplyr::recode()}} and \code{\link[dplyr:case_when]{dplyr::case_when()}} to more generally replace
values.
}
